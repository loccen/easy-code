name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # 代码质量检查
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './app/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run TypeScript check
      run: npm run type-check
      
    - name: Check build
      run: npm run build

  # 单元测试
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './app/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests with coverage
      run: npm run test:unit:coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        directory: ./app/coverage
        fail_ci_if_error: false
        
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: romeovs/lcov-reporter-action@v0.3.1
      with:
        lcov-file: ./app/coverage/lcov.info
        github-token: ${{ secrets.GITHUB_TOKEN }}

  # E2E测试
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    
    env:
      # 测试环境变量
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_ROLE_KEY }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './app/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Setup test data
      run: npm run test:data setup
      
    - name: Run E2E tests
      run: npm run test:e2e
      
    - name: Cleanup test data
      if: always()
      run: npm run test:data cleanup
      
    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report
        path: ./app/playwright-report/
        retention-days: 30

  # 部署准备检查
  deployment-check:
    name: Deployment Check
    runs-on: ubuntu-latest
    needs: [quality-check, unit-tests]
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./app
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './app/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for production
      run: npm run build
      
    - name: Check bundle size
      run: |
        echo "Bundle size check completed"
        # 这里可以添加bundle分析工具
